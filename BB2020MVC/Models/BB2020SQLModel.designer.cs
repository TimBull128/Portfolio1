#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace BB2020MVC.Models
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="BB2020")]
	public partial class RaceSQLModelDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertRules_Skills_Type(Rules_Skills_Type instance);
    partial void UpdateRules_Skills_Type(Rules_Skills_Type instance);
    partial void DeleteRules_Skills_Type(Rules_Skills_Type instance);
    partial void InsertRaces_Players_Skill(Races_Players_Skill instance);
    partial void UpdateRaces_Players_Skill(Races_Players_Skill instance);
    partial void DeleteRaces_Players_Skill(Races_Players_Skill instance);
    partial void InsertUser_Roster(User_Roster instance);
    partial void UpdateUser_Roster(User_Roster instance);
    partial void DeleteUser_Roster(User_Roster instance);
    partial void InsertRules_SpecialRule(Rules_SpecialRule instance);
    partial void UpdateRules_SpecialRule(Rules_SpecialRule instance);
    partial void DeleteRules_SpecialRule(Rules_SpecialRule instance);
    partial void InsertRace(Race instance);
    partial void UpdateRace(Race instance);
    partial void DeleteRace(Race instance);
    partial void InsertRaces_Player(Races_Player instance);
    partial void UpdateRaces_Player(Races_Player instance);
    partial void DeleteRaces_Player(Races_Player instance);
    partial void InsertRules_Skills_List(Rules_Skills_List instance);
    partial void UpdateRules_Skills_List(Rules_Skills_List instance);
    partial void DeleteRules_Skills_List(Rules_Skills_List instance);
    partial void InsertRules_LvlType(Rules_LvlType instance);
    partial void UpdateRules_LvlType(Rules_LvlType instance);
    partial void DeleteRules_LvlType(Rules_LvlType instance);
    partial void InsertUser_Rosters_LvlType(User_Rosters_LvlType instance);
    partial void UpdateUser_Rosters_LvlType(User_Rosters_LvlType instance);
    partial void DeleteUser_Rosters_LvlType(User_Rosters_LvlType instance);
    partial void InsertUser_Rosters_Positional(User_Rosters_Positional instance);
    partial void UpdateUser_Rosters_Positional(User_Rosters_Positional instance);
    partial void DeleteUser_Rosters_Positional(User_Rosters_Positional instance);
    partial void InsertUser_Rosters_Skill(User_Rosters_Skill instance);
    partial void UpdateUser_Rosters_Skill(User_Rosters_Skill instance);
    partial void DeleteUser_Rosters_Skill(User_Rosters_Skill instance);
    partial void InsertRaces_Players_SkillType(Races_Players_SkillType instance);
    partial void UpdateRaces_Players_SkillType(Races_Players_SkillType instance);
    partial void DeleteRaces_Players_SkillType(Races_Players_SkillType instance);
    #endregion
		
		public RaceSQLModelDataContext() : 
				base(global::System.Configuration.ConfigurationManager.ConnectionStrings["BB2020ConnectionString"].ConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public RaceSQLModelDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public RaceSQLModelDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public RaceSQLModelDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public RaceSQLModelDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<Rules_Skills_Type> Rules_Skills_Types
		{
			get
			{
				return this.GetTable<Rules_Skills_Type>();
			}
		}
		
		public System.Data.Linq.Table<Races_Players_Skill> Races_Players_Skills
		{
			get
			{
				return this.GetTable<Races_Players_Skill>();
			}
		}
		
		public System.Data.Linq.Table<User_Roster> User_Rosters
		{
			get
			{
				return this.GetTable<User_Roster>();
			}
		}
		
		public System.Data.Linq.Table<Rules_SpecialRule> Rules_SpecialRules
		{
			get
			{
				return this.GetTable<Rules_SpecialRule>();
			}
		}
		
		public System.Data.Linq.Table<Race> Races
		{
			get
			{
				return this.GetTable<Race>();
			}
		}
		
		public System.Data.Linq.Table<Races_Player> Races_Players
		{
			get
			{
				return this.GetTable<Races_Player>();
			}
		}
		
		public System.Data.Linq.Table<Rules_Skills_List> Rules_Skills_Lists
		{
			get
			{
				return this.GetTable<Rules_Skills_List>();
			}
		}
		
		public System.Data.Linq.Table<Rules_LvlType> Rules_LvlTypes
		{
			get
			{
				return this.GetTable<Rules_LvlType>();
			}
		}
		
		public System.Data.Linq.Table<User_Rosters_LvlType> User_Rosters_LvlTypes
		{
			get
			{
				return this.GetTable<User_Rosters_LvlType>();
			}
		}
		
		public System.Data.Linq.Table<User_Rosters_Positional> User_Rosters_Positionals
		{
			get
			{
				return this.GetTable<User_Rosters_Positional>();
			}
		}
		
		public System.Data.Linq.Table<User_Rosters_Skill> User_Rosters_Skills
		{
			get
			{
				return this.GetTable<User_Rosters_Skill>();
			}
		}
		
		public System.Data.Linq.Table<Races_Players_SkillType> Races_Players_SkillTypes
		{
			get
			{
				return this.GetTable<Races_Players_SkillType>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.[Rules.Skills.Type]")]
	public partial class Rules_Skills_Type : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _Name;
		
		private EntitySet<Rules_Skills_List> _Rules_Skills_Lists;
		
		private EntitySet<Races_Players_SkillType> _Races_Players_SkillTypes;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    #endregion
		
		public Rules_Skills_Type()
		{
			this._Rules_Skills_Lists = new EntitySet<Rules_Skills_List>(new Action<Rules_Skills_List>(this.attach_Rules_Skills_Lists), new Action<Rules_Skills_List>(this.detach_Rules_Skills_Lists));
			this._Races_Players_SkillTypes = new EntitySet<Races_Players_SkillType>(new Action<Races_Players_SkillType>(this.attach_Races_Players_SkillTypes), new Action<Races_Players_SkillType>(this.detach_Races_Players_SkillTypes));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NChar(10) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Rules_Skills_Type_Rules_Skills_List", Storage="_Rules_Skills_Lists", ThisKey="ID", OtherKey="SkillTypeID")]
		public EntitySet<Rules_Skills_List> Rules_Skills_Lists
		{
			get
			{
				return this._Rules_Skills_Lists;
			}
			set
			{
				this._Rules_Skills_Lists.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Rules_Skills_Type_Races_Players_SkillType", Storage="_Races_Players_SkillTypes", ThisKey="ID", OtherKey="TypeID")]
		public EntitySet<Races_Players_SkillType> Races_Players_SkillTypes
		{
			get
			{
				return this._Races_Players_SkillTypes;
			}
			set
			{
				this._Races_Players_SkillTypes.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Rules_Skills_Lists(Rules_Skills_List entity)
		{
			this.SendPropertyChanging();
			entity.Rules_Skills_Type = this;
		}
		
		private void detach_Rules_Skills_Lists(Rules_Skills_List entity)
		{
			this.SendPropertyChanging();
			entity.Rules_Skills_Type = null;
		}
		
		private void attach_Races_Players_SkillTypes(Races_Players_SkillType entity)
		{
			this.SendPropertyChanging();
			entity.Rules_Skills_Type = this;
		}
		
		private void detach_Races_Players_SkillTypes(Races_Players_SkillType entity)
		{
			this.SendPropertyChanging();
			entity.Rules_Skills_Type = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.[Races.Players.Skills]")]
	public partial class Races_Players_Skill : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private System.Nullable<int> _PlayerID;
		
		private System.Nullable<int> _SkillID;
		
		private EntityRef<Rules_Skills_List> _Rules_Skills_List;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnPlayerIDChanging(System.Nullable<int> value);
    partial void OnPlayerIDChanged();
    partial void OnSkillIDChanging(System.Nullable<int> value);
    partial void OnSkillIDChanged();
    #endregion
		
		public Races_Players_Skill()
		{
			this._Rules_Skills_List = default(EntityRef<Rules_Skills_List>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PlayerID", DbType="Int")]
		public System.Nullable<int> PlayerID
		{
			get
			{
				return this._PlayerID;
			}
			set
			{
				if ((this._PlayerID != value))
				{
					if (this._Rules_Skills_List.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPlayerIDChanging(value);
					this.SendPropertyChanging();
					this._PlayerID = value;
					this.SendPropertyChanged("PlayerID");
					this.OnPlayerIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SkillID", DbType="Int")]
		public System.Nullable<int> SkillID
		{
			get
			{
				return this._SkillID;
			}
			set
			{
				if ((this._SkillID != value))
				{
					this.OnSkillIDChanging(value);
					this.SendPropertyChanging();
					this._SkillID = value;
					this.SendPropertyChanged("SkillID");
					this.OnSkillIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Rules_Skills_List_Races_Players_Skill", Storage="_Rules_Skills_List", ThisKey="PlayerID", OtherKey="ID", IsForeignKey=true)]
		public Rules_Skills_List Rules_Skills_List
		{
			get
			{
				return this._Rules_Skills_List.Entity;
			}
			set
			{
				Rules_Skills_List previousValue = this._Rules_Skills_List.Entity;
				if (((previousValue != value) 
							|| (this._Rules_Skills_List.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Rules_Skills_List.Entity = null;
						previousValue.Races_Players_Skills.Remove(this);
					}
					this._Rules_Skills_List.Entity = value;
					if ((value != null))
					{
						value.Races_Players_Skills.Add(this);
						this._PlayerID = value.ID;
					}
					else
					{
						this._PlayerID = default(Nullable<int>);
					}
					this.SendPropertyChanged("Rules_Skills_List");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.[User.Rosters]")]
	public partial class User_Roster : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private int _RaceID;
		
		private string _Name;
		
		private int _RerollsQTY;
		
		private bool _Apoths;
		
		private int _CheerLeadersQTY;
		
		private int _CoachesQTY;
		
		private int _TV;
		
		private int _Treasury;
		
		private bool _InTourney;
		
		private EntitySet<User_Rosters_Positional> _User_Rosters_Positionals;
		
		private EntityRef<Race> _Race;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnRaceIDChanging(int value);
    partial void OnRaceIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnRerollsQTYChanging(int value);
    partial void OnRerollsQTYChanged();
    partial void OnApothsChanging(bool value);
    partial void OnApothsChanged();
    partial void OnCheerLeadersQTYChanging(int value);
    partial void OnCheerLeadersQTYChanged();
    partial void OnCoachesQTYChanging(int value);
    partial void OnCoachesQTYChanged();
    partial void OnTVChanging(int value);
    partial void OnTVChanged();
    partial void OnTreasuryChanging(int value);
    partial void OnTreasuryChanged();
    partial void OnInTourneyChanging(bool value);
    partial void OnInTourneyChanged();
    #endregion
		
		public User_Roster()
		{
			this._User_Rosters_Positionals = new EntitySet<User_Rosters_Positional>(new Action<User_Rosters_Positional>(this.attach_User_Rosters_Positionals), new Action<User_Rosters_Positional>(this.detach_User_Rosters_Positionals));
			this._Race = default(EntityRef<Race>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RaceID", DbType="Int NOT NULL")]
		public int RaceID
		{
			get
			{
				return this._RaceID;
			}
			set
			{
				if ((this._RaceID != value))
				{
					if (this._Race.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnRaceIDChanging(value);
					this.SendPropertyChanging();
					this._RaceID = value;
					this.SendPropertyChanged("RaceID");
					this.OnRaceIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RerollsQTY", DbType="Int NOT NULL")]
		public int RerollsQTY
		{
			get
			{
				return this._RerollsQTY;
			}
			set
			{
				if ((this._RerollsQTY != value))
				{
					this.OnRerollsQTYChanging(value);
					this.SendPropertyChanging();
					this._RerollsQTY = value;
					this.SendPropertyChanged("RerollsQTY");
					this.OnRerollsQTYChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Apoths", DbType="Bit NOT NULL")]
		public bool Apoths
		{
			get
			{
				return this._Apoths;
			}
			set
			{
				if ((this._Apoths != value))
				{
					this.OnApothsChanging(value);
					this.SendPropertyChanging();
					this._Apoths = value;
					this.SendPropertyChanged("Apoths");
					this.OnApothsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CheerLeadersQTY", DbType="Int NOT NULL")]
		public int CheerLeadersQTY
		{
			get
			{
				return this._CheerLeadersQTY;
			}
			set
			{
				if ((this._CheerLeadersQTY != value))
				{
					this.OnCheerLeadersQTYChanging(value);
					this.SendPropertyChanging();
					this._CheerLeadersQTY = value;
					this.SendPropertyChanged("CheerLeadersQTY");
					this.OnCheerLeadersQTYChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CoachesQTY", DbType="Int NOT NULL")]
		public int CoachesQTY
		{
			get
			{
				return this._CoachesQTY;
			}
			set
			{
				if ((this._CoachesQTY != value))
				{
					this.OnCoachesQTYChanging(value);
					this.SendPropertyChanging();
					this._CoachesQTY = value;
					this.SendPropertyChanged("CoachesQTY");
					this.OnCoachesQTYChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TV", DbType="Int NOT NULL")]
		public int TV
		{
			get
			{
				return this._TV;
			}
			set
			{
				if ((this._TV != value))
				{
					this.OnTVChanging(value);
					this.SendPropertyChanging();
					this._TV = value;
					this.SendPropertyChanged("TV");
					this.OnTVChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Treasury", DbType="Int NOT NULL")]
		public int Treasury
		{
			get
			{
				return this._Treasury;
			}
			set
			{
				if ((this._Treasury != value))
				{
					this.OnTreasuryChanging(value);
					this.SendPropertyChanging();
					this._Treasury = value;
					this.SendPropertyChanged("Treasury");
					this.OnTreasuryChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_InTourney", DbType="Bit NOT NULL")]
		public bool InTourney
		{
			get
			{
				return this._InTourney;
			}
			set
			{
				if ((this._InTourney != value))
				{
					this.OnInTourneyChanging(value);
					this.SendPropertyChanging();
					this._InTourney = value;
					this.SendPropertyChanged("InTourney");
					this.OnInTourneyChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_Roster_User_Rosters_Positional", Storage="_User_Rosters_Positionals", ThisKey="ID", OtherKey="RosterID")]
		public EntitySet<User_Rosters_Positional> User_Rosters_Positionals
		{
			get
			{
				return this._User_Rosters_Positionals;
			}
			set
			{
				this._User_Rosters_Positionals.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Race_User_Roster", Storage="_Race", ThisKey="RaceID", OtherKey="ID", IsForeignKey=true)]
		public Race Race
		{
			get
			{
				return this._Race.Entity;
			}
			set
			{
				Race previousValue = this._Race.Entity;
				if (((previousValue != value) 
							|| (this._Race.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Race.Entity = null;
						previousValue.User_Rosters.Remove(this);
					}
					this._Race.Entity = value;
					if ((value != null))
					{
						value.User_Rosters.Add(this);
						this._RaceID = value.ID;
					}
					else
					{
						this._RaceID = default(int);
					}
					this.SendPropertyChanged("Race");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_User_Rosters_Positionals(User_Rosters_Positional entity)
		{
			this.SendPropertyChanging();
			entity.User_Roster = this;
		}
		
		private void detach_User_Rosters_Positionals(User_Rosters_Positional entity)
		{
			this.SendPropertyChanging();
			entity.User_Roster = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.[Rules.SpecialRules]")]
	public partial class Rules_SpecialRule : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _Name;
		
		private string _Description;
		
		private EntitySet<Race> _Races;
		
		private EntityRef<Race> _Race;
		
		private EntitySet<Race> _Races1;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    #endregion
		
		public Rules_SpecialRule()
		{
			this._Races = new EntitySet<Race>(new Action<Race>(this.attach_Races), new Action<Race>(this.detach_Races));
			this._Race = default(EntityRef<Race>);
			this._Races1 = new EntitySet<Race>(new Action<Race>(this.attach_Races1), new Action<Race>(this.detach_Races1));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Rules_SpecialRule_Race", Storage="_Races", ThisKey="ID", OtherKey="SRID1")]
		public EntitySet<Race> Races
		{
			get
			{
				return this._Races;
			}
			set
			{
				this._Races.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Rules_SpecialRule_Race1", Storage="_Race", ThisKey="ID", OtherKey="ID", IsUnique=true, IsForeignKey=false)]
		public Race Race
		{
			get
			{
				return this._Race.Entity;
			}
			set
			{
				Race previousValue = this._Race.Entity;
				if (((previousValue != value) 
							|| (this._Race.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Race.Entity = null;
						previousValue.Rules_SpecialRule1 = null;
					}
					this._Race.Entity = value;
					if ((value != null))
					{
						value.Rules_SpecialRule1 = this;
					}
					this.SendPropertyChanged("Race");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Rules_SpecialRule_Race2", Storage="_Races1", ThisKey="ID", OtherKey="SRID3")]
		public EntitySet<Race> Races1
		{
			get
			{
				return this._Races1;
			}
			set
			{
				this._Races1.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Races(Race entity)
		{
			this.SendPropertyChanging();
			entity.Rules_SpecialRule = this;
		}
		
		private void detach_Races(Race entity)
		{
			this.SendPropertyChanging();
			entity.Rules_SpecialRule = null;
		}
		
		private void attach_Races1(Race entity)
		{
			this.SendPropertyChanging();
			entity.Rules_SpecialRule2 = this;
		}
		
		private void detach_Races1(Race entity)
		{
			this.SendPropertyChanging();
			entity.Rules_SpecialRule2 = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Races")]
	public partial class Race : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _Name;
		
		private bool _Apothecary;
		
		private int _RerollCost;
		
		private System.Nullable<int> _SRID1;
		
		private System.Nullable<int> _SRID2;
		
		private System.Nullable<int> _SRID3;
		
		private EntitySet<User_Roster> _User_Rosters;
		
		private EntityRef<Rules_SpecialRule> _Rules_SpecialRule;
		
		private EntityRef<Rules_SpecialRule> _Rules_SpecialRule1;
		
		private EntityRef<Rules_SpecialRule> _Rules_SpecialRule2;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnApothecaryChanging(bool value);
    partial void OnApothecaryChanged();
    partial void OnRerollCostChanging(int value);
    partial void OnRerollCostChanged();
    partial void OnSRID1Changing(System.Nullable<int> value);
    partial void OnSRID1Changed();
    partial void OnSRID2Changing(System.Nullable<int> value);
    partial void OnSRID2Changed();
    partial void OnSRID3Changing(System.Nullable<int> value);
    partial void OnSRID3Changed();
    #endregion
		
		public Race()
		{
			this._User_Rosters = new EntitySet<User_Roster>(new Action<User_Roster>(this.attach_User_Rosters), new Action<User_Roster>(this.detach_User_Rosters));
			this._Rules_SpecialRule = default(EntityRef<Rules_SpecialRule>);
			this._Rules_SpecialRule1 = default(EntityRef<Rules_SpecialRule>);
			this._Rules_SpecialRule2 = default(EntityRef<Rules_SpecialRule>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					if (this._Rules_SpecialRule1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NChar(20) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Apothecary", DbType="Bit NOT NULL")]
		public bool Apothecary
		{
			get
			{
				return this._Apothecary;
			}
			set
			{
				if ((this._Apothecary != value))
				{
					this.OnApothecaryChanging(value);
					this.SendPropertyChanging();
					this._Apothecary = value;
					this.SendPropertyChanged("Apothecary");
					this.OnApothecaryChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RerollCost", DbType="Int NOT NULL")]
		public int RerollCost
		{
			get
			{
				return this._RerollCost;
			}
			set
			{
				if ((this._RerollCost != value))
				{
					this.OnRerollCostChanging(value);
					this.SendPropertyChanging();
					this._RerollCost = value;
					this.SendPropertyChanged("RerollCost");
					this.OnRerollCostChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SRID1", DbType="Int")]
		public System.Nullable<int> SRID1
		{
			get
			{
				return this._SRID1;
			}
			set
			{
				if ((this._SRID1 != value))
				{
					if (this._Rules_SpecialRule.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSRID1Changing(value);
					this.SendPropertyChanging();
					this._SRID1 = value;
					this.SendPropertyChanged("SRID1");
					this.OnSRID1Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SRID2", DbType="Int")]
		public System.Nullable<int> SRID2
		{
			get
			{
				return this._SRID2;
			}
			set
			{
				if ((this._SRID2 != value))
				{
					this.OnSRID2Changing(value);
					this.SendPropertyChanging();
					this._SRID2 = value;
					this.SendPropertyChanged("SRID2");
					this.OnSRID2Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SRID3", DbType="Int")]
		public System.Nullable<int> SRID3
		{
			get
			{
				return this._SRID3;
			}
			set
			{
				if ((this._SRID3 != value))
				{
					if (this._Rules_SpecialRule2.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSRID3Changing(value);
					this.SendPropertyChanging();
					this._SRID3 = value;
					this.SendPropertyChanged("SRID3");
					this.OnSRID3Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Race_User_Roster", Storage="_User_Rosters", ThisKey="ID", OtherKey="RaceID")]
		public EntitySet<User_Roster> User_Rosters
		{
			get
			{
				return this._User_Rosters;
			}
			set
			{
				this._User_Rosters.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Rules_SpecialRule_Race", Storage="_Rules_SpecialRule", ThisKey="SRID1", OtherKey="ID", IsForeignKey=true)]
		public Rules_SpecialRule Rules_SpecialRule
		{
			get
			{
				return this._Rules_SpecialRule.Entity;
			}
			set
			{
				Rules_SpecialRule previousValue = this._Rules_SpecialRule.Entity;
				if (((previousValue != value) 
							|| (this._Rules_SpecialRule.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Rules_SpecialRule.Entity = null;
						previousValue.Races.Remove(this);
					}
					this._Rules_SpecialRule.Entity = value;
					if ((value != null))
					{
						value.Races.Add(this);
						this._SRID1 = value.ID;
					}
					else
					{
						this._SRID1 = default(Nullable<int>);
					}
					this.SendPropertyChanged("Rules_SpecialRule");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Rules_SpecialRule_Race1", Storage="_Rules_SpecialRule1", ThisKey="ID", OtherKey="ID", IsForeignKey=true)]
		public Rules_SpecialRule Rules_SpecialRule1
		{
			get
			{
				return this._Rules_SpecialRule1.Entity;
			}
			set
			{
				Rules_SpecialRule previousValue = this._Rules_SpecialRule1.Entity;
				if (((previousValue != value) 
							|| (this._Rules_SpecialRule1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Rules_SpecialRule1.Entity = null;
						previousValue.Race = null;
					}
					this._Rules_SpecialRule1.Entity = value;
					if ((value != null))
					{
						value.Race = this;
						this._ID = value.ID;
					}
					else
					{
						this._ID = default(int);
					}
					this.SendPropertyChanged("Rules_SpecialRule1");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Rules_SpecialRule_Race2", Storage="_Rules_SpecialRule2", ThisKey="SRID3", OtherKey="ID", IsForeignKey=true)]
		public Rules_SpecialRule Rules_SpecialRule2
		{
			get
			{
				return this._Rules_SpecialRule2.Entity;
			}
			set
			{
				Rules_SpecialRule previousValue = this._Rules_SpecialRule2.Entity;
				if (((previousValue != value) 
							|| (this._Rules_SpecialRule2.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Rules_SpecialRule2.Entity = null;
						previousValue.Races1.Remove(this);
					}
					this._Rules_SpecialRule2.Entity = value;
					if ((value != null))
					{
						value.Races1.Add(this);
						this._SRID3 = value.ID;
					}
					else
					{
						this._SRID3 = default(Nullable<int>);
					}
					this.SendPropertyChanged("Rules_SpecialRule2");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_User_Rosters(User_Roster entity)
		{
			this.SendPropertyChanging();
			entity.Race = this;
		}
		
		private void detach_User_Rosters(User_Roster entity)
		{
			this.SendPropertyChanging();
			entity.Race = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.[Races.Players]")]
	public partial class Races_Player : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private int _RaceID;
		
		private int _MA;
		
		private int _AG;
		
		private int _AV;
		
		private System.Nullable<int> _PA;
		
		private int _Cost;
		
		private System.Nullable<int> _STRENGTH;
		
		private string _Name;
		
		private EntitySet<User_Rosters_Positional> _User_Rosters_Positionals;
		
		private EntitySet<Races_Players_SkillType> _Races_Players_SkillTypes;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnRaceIDChanging(int value);
    partial void OnRaceIDChanged();
    partial void OnMAChanging(int value);
    partial void OnMAChanged();
    partial void OnAGChanging(int value);
    partial void OnAGChanged();
    partial void OnAVChanging(int value);
    partial void OnAVChanged();
    partial void OnPAChanging(System.Nullable<int> value);
    partial void OnPAChanged();
    partial void OnCostChanging(int value);
    partial void OnCostChanged();
    partial void OnSTRENGTHChanging(System.Nullable<int> value);
    partial void OnSTRENGTHChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    #endregion
		
		public Races_Player()
		{
			this._User_Rosters_Positionals = new EntitySet<User_Rosters_Positional>(new Action<User_Rosters_Positional>(this.attach_User_Rosters_Positionals), new Action<User_Rosters_Positional>(this.detach_User_Rosters_Positionals));
			this._Races_Players_SkillTypes = new EntitySet<Races_Players_SkillType>(new Action<Races_Players_SkillType>(this.attach_Races_Players_SkillTypes), new Action<Races_Players_SkillType>(this.detach_Races_Players_SkillTypes));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RaceID", DbType="Int NOT NULL")]
		public int RaceID
		{
			get
			{
				return this._RaceID;
			}
			set
			{
				if ((this._RaceID != value))
				{
					this.OnRaceIDChanging(value);
					this.SendPropertyChanging();
					this._RaceID = value;
					this.SendPropertyChanged("RaceID");
					this.OnRaceIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MA", DbType="Int NOT NULL")]
		public int MA
		{
			get
			{
				return this._MA;
			}
			set
			{
				if ((this._MA != value))
				{
					this.OnMAChanging(value);
					this.SendPropertyChanging();
					this._MA = value;
					this.SendPropertyChanged("MA");
					this.OnMAChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AG", DbType="Int NOT NULL")]
		public int AG
		{
			get
			{
				return this._AG;
			}
			set
			{
				if ((this._AG != value))
				{
					this.OnAGChanging(value);
					this.SendPropertyChanging();
					this._AG = value;
					this.SendPropertyChanged("AG");
					this.OnAGChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AV", DbType="Int NOT NULL")]
		public int AV
		{
			get
			{
				return this._AV;
			}
			set
			{
				if ((this._AV != value))
				{
					this.OnAVChanging(value);
					this.SendPropertyChanging();
					this._AV = value;
					this.SendPropertyChanged("AV");
					this.OnAVChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PA", DbType="Int")]
		public System.Nullable<int> PA
		{
			get
			{
				return this._PA;
			}
			set
			{
				if ((this._PA != value))
				{
					this.OnPAChanging(value);
					this.SendPropertyChanging();
					this._PA = value;
					this.SendPropertyChanged("PA");
					this.OnPAChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Cost", DbType="Int NOT NULL")]
		public int Cost
		{
			get
			{
				return this._Cost;
			}
			set
			{
				if ((this._Cost != value))
				{
					this.OnCostChanging(value);
					this.SendPropertyChanging();
					this._Cost = value;
					this.SendPropertyChanged("Cost");
					this.OnCostChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_STRENGTH", DbType="Int")]
		public System.Nullable<int> STRENGTH
		{
			get
			{
				return this._STRENGTH;
			}
			set
			{
				if ((this._STRENGTH != value))
				{
					this.OnSTRENGTHChanging(value);
					this.SendPropertyChanging();
					this._STRENGTH = value;
					this.SendPropertyChanged("STRENGTH");
					this.OnSTRENGTHChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(MAX)")]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Races_Player_User_Rosters_Positional", Storage="_User_Rosters_Positionals", ThisKey="ID", OtherKey="PositionID")]
		public EntitySet<User_Rosters_Positional> User_Rosters_Positionals
		{
			get
			{
				return this._User_Rosters_Positionals;
			}
			set
			{
				this._User_Rosters_Positionals.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Races_Player_Races_Players_SkillType", Storage="_Races_Players_SkillTypes", ThisKey="ID", OtherKey="PlayerID")]
		public EntitySet<Races_Players_SkillType> Races_Players_SkillTypes
		{
			get
			{
				return this._Races_Players_SkillTypes;
			}
			set
			{
				this._Races_Players_SkillTypes.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_User_Rosters_Positionals(User_Rosters_Positional entity)
		{
			this.SendPropertyChanging();
			entity.Races_Player = this;
		}
		
		private void detach_User_Rosters_Positionals(User_Rosters_Positional entity)
		{
			this.SendPropertyChanging();
			entity.Races_Player = null;
		}
		
		private void attach_Races_Players_SkillTypes(Races_Players_SkillType entity)
		{
			this.SendPropertyChanging();
			entity.Races_Player = this;
		}
		
		private void detach_Races_Players_SkillTypes(Races_Players_SkillType entity)
		{
			this.SendPropertyChanging();
			entity.Races_Player = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.[Rules.Skills.List]")]
	public partial class Rules_Skills_List : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private int _SkillTypeID;
		
		private string _Name;
		
		private bool _NotOptional;
		
		private string _Description;
		
		private EntitySet<Races_Players_Skill> _Races_Players_Skills;
		
		private EntitySet<User_Rosters_Skill> _User_Rosters_Skills;
		
		private EntityRef<Rules_Skills_Type> _Rules_Skills_Type;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnSkillTypeIDChanging(int value);
    partial void OnSkillTypeIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnNotOptionalChanging(bool value);
    partial void OnNotOptionalChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    #endregion
		
		public Rules_Skills_List()
		{
			this._Races_Players_Skills = new EntitySet<Races_Players_Skill>(new Action<Races_Players_Skill>(this.attach_Races_Players_Skills), new Action<Races_Players_Skill>(this.detach_Races_Players_Skills));
			this._User_Rosters_Skills = new EntitySet<User_Rosters_Skill>(new Action<User_Rosters_Skill>(this.attach_User_Rosters_Skills), new Action<User_Rosters_Skill>(this.detach_User_Rosters_Skills));
			this._Rules_Skills_Type = default(EntityRef<Rules_Skills_Type>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SkillTypeID", DbType="Int NOT NULL")]
		public int SkillTypeID
		{
			get
			{
				return this._SkillTypeID;
			}
			set
			{
				if ((this._SkillTypeID != value))
				{
					if (this._Rules_Skills_Type.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSkillTypeIDChanging(value);
					this.SendPropertyChanging();
					this._SkillTypeID = value;
					this.SendPropertyChanged("SkillTypeID");
					this.OnSkillTypeIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NotOptional", DbType="Bit NOT NULL")]
		public bool NotOptional
		{
			get
			{
				return this._NotOptional;
			}
			set
			{
				if ((this._NotOptional != value))
				{
					this.OnNotOptionalChanging(value);
					this.SendPropertyChanging();
					this._NotOptional = value;
					this.SendPropertyChanged("NotOptional");
					this.OnNotOptionalChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="NVarChar(MAX)")]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Rules_Skills_List_Races_Players_Skill", Storage="_Races_Players_Skills", ThisKey="ID", OtherKey="PlayerID")]
		public EntitySet<Races_Players_Skill> Races_Players_Skills
		{
			get
			{
				return this._Races_Players_Skills;
			}
			set
			{
				this._Races_Players_Skills.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Rules_Skills_List_User_Rosters_Skill", Storage="_User_Rosters_Skills", ThisKey="ID", OtherKey="SkillID")]
		public EntitySet<User_Rosters_Skill> User_Rosters_Skills
		{
			get
			{
				return this._User_Rosters_Skills;
			}
			set
			{
				this._User_Rosters_Skills.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Rules_Skills_Type_Rules_Skills_List", Storage="_Rules_Skills_Type", ThisKey="SkillTypeID", OtherKey="ID", IsForeignKey=true)]
		public Rules_Skills_Type Rules_Skills_Type
		{
			get
			{
				return this._Rules_Skills_Type.Entity;
			}
			set
			{
				Rules_Skills_Type previousValue = this._Rules_Skills_Type.Entity;
				if (((previousValue != value) 
							|| (this._Rules_Skills_Type.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Rules_Skills_Type.Entity = null;
						previousValue.Rules_Skills_Lists.Remove(this);
					}
					this._Rules_Skills_Type.Entity = value;
					if ((value != null))
					{
						value.Rules_Skills_Lists.Add(this);
						this._SkillTypeID = value.ID;
					}
					else
					{
						this._SkillTypeID = default(int);
					}
					this.SendPropertyChanged("Rules_Skills_Type");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Races_Players_Skills(Races_Players_Skill entity)
		{
			this.SendPropertyChanging();
			entity.Rules_Skills_List = this;
		}
		
		private void detach_Races_Players_Skills(Races_Players_Skill entity)
		{
			this.SendPropertyChanging();
			entity.Rules_Skills_List = null;
		}
		
		private void attach_User_Rosters_Skills(User_Rosters_Skill entity)
		{
			this.SendPropertyChanging();
			entity.Rules_Skills_List = this;
		}
		
		private void detach_User_Rosters_Skills(User_Rosters_Skill entity)
		{
			this.SendPropertyChanging();
			entity.Rules_Skills_List = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.[Rules.LvlType]")]
	public partial class Rules_LvlType : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _Description;
		
		private int _Cost;
		
		private EntitySet<User_Rosters_LvlType> _User_Rosters_LvlTypes;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    partial void OnCostChanging(int value);
    partial void OnCostChanged();
    #endregion
		
		public Rules_LvlType()
		{
			this._User_Rosters_LvlTypes = new EntitySet<User_Rosters_LvlType>(new Action<User_Rosters_LvlType>(this.attach_User_Rosters_LvlTypes), new Action<User_Rosters_LvlType>(this.detach_User_Rosters_LvlTypes));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Cost", DbType="Int NOT NULL")]
		public int Cost
		{
			get
			{
				return this._Cost;
			}
			set
			{
				if ((this._Cost != value))
				{
					this.OnCostChanging(value);
					this.SendPropertyChanging();
					this._Cost = value;
					this.SendPropertyChanged("Cost");
					this.OnCostChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Rules_LvlType_User_Rosters_LvlType", Storage="_User_Rosters_LvlTypes", ThisKey="ID", OtherKey="PositionID")]
		public EntitySet<User_Rosters_LvlType> User_Rosters_LvlTypes
		{
			get
			{
				return this._User_Rosters_LvlTypes;
			}
			set
			{
				this._User_Rosters_LvlTypes.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_User_Rosters_LvlTypes(User_Rosters_LvlType entity)
		{
			this.SendPropertyChanging();
			entity.Rules_LvlType = this;
		}
		
		private void detach_User_Rosters_LvlTypes(User_Rosters_LvlType entity)
		{
			this.SendPropertyChanging();
			entity.Rules_LvlType = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.[User.Rosters.LvlTypes]")]
	public partial class User_Rosters_LvlType : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private int _PositionID;
		
		private int _LvlTypeID;
		
		private EntityRef<Rules_LvlType> _Rules_LvlType;
		
		private EntityRef<User_Rosters_Positional> _User_Rosters_Positional;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnPositionIDChanging(int value);
    partial void OnPositionIDChanged();
    partial void OnLvlTypeIDChanging(int value);
    partial void OnLvlTypeIDChanged();
    #endregion
		
		public User_Rosters_LvlType()
		{
			this._Rules_LvlType = default(EntityRef<Rules_LvlType>);
			this._User_Rosters_Positional = default(EntityRef<User_Rosters_Positional>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PositionID", DbType="Int NOT NULL")]
		public int PositionID
		{
			get
			{
				return this._PositionID;
			}
			set
			{
				if ((this._PositionID != value))
				{
					if ((this._Rules_LvlType.HasLoadedOrAssignedValue || this._User_Rosters_Positional.HasLoadedOrAssignedValue))
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPositionIDChanging(value);
					this.SendPropertyChanging();
					this._PositionID = value;
					this.SendPropertyChanged("PositionID");
					this.OnPositionIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LvlTypeID", DbType="Int NOT NULL")]
		public int LvlTypeID
		{
			get
			{
				return this._LvlTypeID;
			}
			set
			{
				if ((this._LvlTypeID != value))
				{
					this.OnLvlTypeIDChanging(value);
					this.SendPropertyChanging();
					this._LvlTypeID = value;
					this.SendPropertyChanged("LvlTypeID");
					this.OnLvlTypeIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Rules_LvlType_User_Rosters_LvlType", Storage="_Rules_LvlType", ThisKey="PositionID", OtherKey="ID", IsForeignKey=true)]
		public Rules_LvlType Rules_LvlType
		{
			get
			{
				return this._Rules_LvlType.Entity;
			}
			set
			{
				Rules_LvlType previousValue = this._Rules_LvlType.Entity;
				if (((previousValue != value) 
							|| (this._Rules_LvlType.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Rules_LvlType.Entity = null;
						previousValue.User_Rosters_LvlTypes.Remove(this);
					}
					this._Rules_LvlType.Entity = value;
					if ((value != null))
					{
						value.User_Rosters_LvlTypes.Add(this);
						this._PositionID = value.ID;
					}
					else
					{
						this._PositionID = default(int);
					}
					this.SendPropertyChanged("Rules_LvlType");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_Rosters_Positional_User_Rosters_LvlType", Storage="_User_Rosters_Positional", ThisKey="PositionID", OtherKey="ID", IsForeignKey=true)]
		public User_Rosters_Positional User_Rosters_Positional
		{
			get
			{
				return this._User_Rosters_Positional.Entity;
			}
			set
			{
				User_Rosters_Positional previousValue = this._User_Rosters_Positional.Entity;
				if (((previousValue != value) 
							|| (this._User_Rosters_Positional.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User_Rosters_Positional.Entity = null;
						previousValue.User_Rosters_LvlTypes.Remove(this);
					}
					this._User_Rosters_Positional.Entity = value;
					if ((value != null))
					{
						value.User_Rosters_LvlTypes.Add(this);
						this._PositionID = value.ID;
					}
					else
					{
						this._PositionID = default(int);
					}
					this.SendPropertyChanged("User_Rosters_Positional");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.[User.Rosters.Positionals]")]
	public partial class User_Rosters_Positional : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private int _PositionID;
		
		private int _SPP;
		
		private int _RosterID;
		
		private string _Name;
		
		private EntitySet<User_Rosters_LvlType> _User_Rosters_LvlTypes;
		
		private EntitySet<User_Rosters_Skill> _User_Rosters_Skills;
		
		private EntityRef<Races_Player> _Races_Player;
		
		private EntityRef<User_Roster> _User_Roster;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnPositionIDChanging(int value);
    partial void OnPositionIDChanged();
    partial void OnSPPChanging(int value);
    partial void OnSPPChanged();
    partial void OnRosterIDChanging(int value);
    partial void OnRosterIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    #endregion
		
		public User_Rosters_Positional()
		{
			this._User_Rosters_LvlTypes = new EntitySet<User_Rosters_LvlType>(new Action<User_Rosters_LvlType>(this.attach_User_Rosters_LvlTypes), new Action<User_Rosters_LvlType>(this.detach_User_Rosters_LvlTypes));
			this._User_Rosters_Skills = new EntitySet<User_Rosters_Skill>(new Action<User_Rosters_Skill>(this.attach_User_Rosters_Skills), new Action<User_Rosters_Skill>(this.detach_User_Rosters_Skills));
			this._Races_Player = default(EntityRef<Races_Player>);
			this._User_Roster = default(EntityRef<User_Roster>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PositionID", DbType="Int NOT NULL")]
		public int PositionID
		{
			get
			{
				return this._PositionID;
			}
			set
			{
				if ((this._PositionID != value))
				{
					if (this._Races_Player.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPositionIDChanging(value);
					this.SendPropertyChanging();
					this._PositionID = value;
					this.SendPropertyChanged("PositionID");
					this.OnPositionIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SPP", DbType="Int NOT NULL")]
		public int SPP
		{
			get
			{
				return this._SPP;
			}
			set
			{
				if ((this._SPP != value))
				{
					this.OnSPPChanging(value);
					this.SendPropertyChanging();
					this._SPP = value;
					this.SendPropertyChanged("SPP");
					this.OnSPPChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RosterID", DbType="Int NOT NULL")]
		public int RosterID
		{
			get
			{
				return this._RosterID;
			}
			set
			{
				if ((this._RosterID != value))
				{
					if (this._User_Roster.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnRosterIDChanging(value);
					this.SendPropertyChanging();
					this._RosterID = value;
					this.SendPropertyChanged("RosterID");
					this.OnRosterIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(50)")]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_Rosters_Positional_User_Rosters_LvlType", Storage="_User_Rosters_LvlTypes", ThisKey="ID", OtherKey="PositionID")]
		public EntitySet<User_Rosters_LvlType> User_Rosters_LvlTypes
		{
			get
			{
				return this._User_Rosters_LvlTypes;
			}
			set
			{
				this._User_Rosters_LvlTypes.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_Rosters_Positional_User_Rosters_Skill", Storage="_User_Rosters_Skills", ThisKey="ID", OtherKey="PositionalID")]
		public EntitySet<User_Rosters_Skill> User_Rosters_Skills
		{
			get
			{
				return this._User_Rosters_Skills;
			}
			set
			{
				this._User_Rosters_Skills.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Races_Player_User_Rosters_Positional", Storage="_Races_Player", ThisKey="PositionID", OtherKey="ID", IsForeignKey=true)]
		public Races_Player Races_Player
		{
			get
			{
				return this._Races_Player.Entity;
			}
			set
			{
				Races_Player previousValue = this._Races_Player.Entity;
				if (((previousValue != value) 
							|| (this._Races_Player.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Races_Player.Entity = null;
						previousValue.User_Rosters_Positionals.Remove(this);
					}
					this._Races_Player.Entity = value;
					if ((value != null))
					{
						value.User_Rosters_Positionals.Add(this);
						this._PositionID = value.ID;
					}
					else
					{
						this._PositionID = default(int);
					}
					this.SendPropertyChanged("Races_Player");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_Roster_User_Rosters_Positional", Storage="_User_Roster", ThisKey="RosterID", OtherKey="ID", IsForeignKey=true)]
		public User_Roster User_Roster
		{
			get
			{
				return this._User_Roster.Entity;
			}
			set
			{
				User_Roster previousValue = this._User_Roster.Entity;
				if (((previousValue != value) 
							|| (this._User_Roster.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User_Roster.Entity = null;
						previousValue.User_Rosters_Positionals.Remove(this);
					}
					this._User_Roster.Entity = value;
					if ((value != null))
					{
						value.User_Rosters_Positionals.Add(this);
						this._RosterID = value.ID;
					}
					else
					{
						this._RosterID = default(int);
					}
					this.SendPropertyChanged("User_Roster");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_User_Rosters_LvlTypes(User_Rosters_LvlType entity)
		{
			this.SendPropertyChanging();
			entity.User_Rosters_Positional = this;
		}
		
		private void detach_User_Rosters_LvlTypes(User_Rosters_LvlType entity)
		{
			this.SendPropertyChanging();
			entity.User_Rosters_Positional = null;
		}
		
		private void attach_User_Rosters_Skills(User_Rosters_Skill entity)
		{
			this.SendPropertyChanging();
			entity.User_Rosters_Positional = this;
		}
		
		private void detach_User_Rosters_Skills(User_Rosters_Skill entity)
		{
			this.SendPropertyChanging();
			entity.User_Rosters_Positional = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.[User.Rosters.Skills]")]
	public partial class User_Rosters_Skill : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private int _SkillID;
		
		private int _PositionalID;
		
		private EntityRef<User_Rosters_Positional> _User_Rosters_Positional;
		
		private EntityRef<Rules_Skills_List> _Rules_Skills_List;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnSkillIDChanging(int value);
    partial void OnSkillIDChanged();
    partial void OnPositionalIDChanging(int value);
    partial void OnPositionalIDChanged();
    #endregion
		
		public User_Rosters_Skill()
		{
			this._User_Rosters_Positional = default(EntityRef<User_Rosters_Positional>);
			this._Rules_Skills_List = default(EntityRef<Rules_Skills_List>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SkillID", DbType="Int NOT NULL")]
		public int SkillID
		{
			get
			{
				return this._SkillID;
			}
			set
			{
				if ((this._SkillID != value))
				{
					if (this._Rules_Skills_List.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSkillIDChanging(value);
					this.SendPropertyChanging();
					this._SkillID = value;
					this.SendPropertyChanged("SkillID");
					this.OnSkillIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PositionalID", DbType="Int NOT NULL")]
		public int PositionalID
		{
			get
			{
				return this._PositionalID;
			}
			set
			{
				if ((this._PositionalID != value))
				{
					if (this._User_Rosters_Positional.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPositionalIDChanging(value);
					this.SendPropertyChanging();
					this._PositionalID = value;
					this.SendPropertyChanged("PositionalID");
					this.OnPositionalIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_Rosters_Positional_User_Rosters_Skill", Storage="_User_Rosters_Positional", ThisKey="PositionalID", OtherKey="ID", IsForeignKey=true)]
		public User_Rosters_Positional User_Rosters_Positional
		{
			get
			{
				return this._User_Rosters_Positional.Entity;
			}
			set
			{
				User_Rosters_Positional previousValue = this._User_Rosters_Positional.Entity;
				if (((previousValue != value) 
							|| (this._User_Rosters_Positional.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User_Rosters_Positional.Entity = null;
						previousValue.User_Rosters_Skills.Remove(this);
					}
					this._User_Rosters_Positional.Entity = value;
					if ((value != null))
					{
						value.User_Rosters_Skills.Add(this);
						this._PositionalID = value.ID;
					}
					else
					{
						this._PositionalID = default(int);
					}
					this.SendPropertyChanged("User_Rosters_Positional");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Rules_Skills_List_User_Rosters_Skill", Storage="_Rules_Skills_List", ThisKey="SkillID", OtherKey="ID", IsForeignKey=true)]
		public Rules_Skills_List Rules_Skills_List
		{
			get
			{
				return this._Rules_Skills_List.Entity;
			}
			set
			{
				Rules_Skills_List previousValue = this._Rules_Skills_List.Entity;
				if (((previousValue != value) 
							|| (this._Rules_Skills_List.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Rules_Skills_List.Entity = null;
						previousValue.User_Rosters_Skills.Remove(this);
					}
					this._Rules_Skills_List.Entity = value;
					if ((value != null))
					{
						value.User_Rosters_Skills.Add(this);
						this._SkillID = value.ID;
					}
					else
					{
						this._SkillID = default(int);
					}
					this.SendPropertyChanged("Rules_Skills_List");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.[Races.Players.SkillTypes]")]
	public partial class Races_Players_SkillType : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private int _TypeID;
		
		private int _PlayerID;
		
		private bool _Single;
		
		private EntityRef<Races_Player> _Races_Player;
		
		private EntityRef<Rules_Skills_Type> _Rules_Skills_Type;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnTypeIDChanging(int value);
    partial void OnTypeIDChanged();
    partial void OnPlayerIDChanging(int value);
    partial void OnPlayerIDChanged();
    partial void OnSingleChanging(bool value);
    partial void OnSingleChanged();
    #endregion
		
		public Races_Players_SkillType()
		{
			this._Races_Player = default(EntityRef<Races_Player>);
			this._Rules_Skills_Type = default(EntityRef<Rules_Skills_Type>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TypeID", DbType="Int NOT NULL")]
		public int TypeID
		{
			get
			{
				return this._TypeID;
			}
			set
			{
				if ((this._TypeID != value))
				{
					if (this._Rules_Skills_Type.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnTypeIDChanging(value);
					this.SendPropertyChanging();
					this._TypeID = value;
					this.SendPropertyChanged("TypeID");
					this.OnTypeIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PlayerID", DbType="Int NOT NULL")]
		public int PlayerID
		{
			get
			{
				return this._PlayerID;
			}
			set
			{
				if ((this._PlayerID != value))
				{
					if (this._Races_Player.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPlayerIDChanging(value);
					this.SendPropertyChanging();
					this._PlayerID = value;
					this.SendPropertyChanged("PlayerID");
					this.OnPlayerIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Single", DbType="Bit NOT NULL")]
		public bool Single
		{
			get
			{
				return this._Single;
			}
			set
			{
				if ((this._Single != value))
				{
					this.OnSingleChanging(value);
					this.SendPropertyChanging();
					this._Single = value;
					this.SendPropertyChanged("Single");
					this.OnSingleChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Races_Player_Races_Players_SkillType", Storage="_Races_Player", ThisKey="PlayerID", OtherKey="ID", IsForeignKey=true)]
		public Races_Player Races_Player
		{
			get
			{
				return this._Races_Player.Entity;
			}
			set
			{
				Races_Player previousValue = this._Races_Player.Entity;
				if (((previousValue != value) 
							|| (this._Races_Player.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Races_Player.Entity = null;
						previousValue.Races_Players_SkillTypes.Remove(this);
					}
					this._Races_Player.Entity = value;
					if ((value != null))
					{
						value.Races_Players_SkillTypes.Add(this);
						this._PlayerID = value.ID;
					}
					else
					{
						this._PlayerID = default(int);
					}
					this.SendPropertyChanged("Races_Player");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Rules_Skills_Type_Races_Players_SkillType", Storage="_Rules_Skills_Type", ThisKey="TypeID", OtherKey="ID", IsForeignKey=true)]
		public Rules_Skills_Type Rules_Skills_Type
		{
			get
			{
				return this._Rules_Skills_Type.Entity;
			}
			set
			{
				Rules_Skills_Type previousValue = this._Rules_Skills_Type.Entity;
				if (((previousValue != value) 
							|| (this._Rules_Skills_Type.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Rules_Skills_Type.Entity = null;
						previousValue.Races_Players_SkillTypes.Remove(this);
					}
					this._Rules_Skills_Type.Entity = value;
					if ((value != null))
					{
						value.Races_Players_SkillTypes.Add(this);
						this._TypeID = value.ID;
					}
					else
					{
						this._TypeID = default(int);
					}
					this.SendPropertyChanged("Rules_Skills_Type");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
}
#pragma warning restore 1591
